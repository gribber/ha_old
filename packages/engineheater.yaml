homeassistant:
  customize:
    sensor.heater_forecast:
      unit_of_measurement: C
      device_class: temperature
      icon: mdi:temperature-celsius

    sensor.heater_temptime:
      unit_of_measurement: min
      icon: mdi:timer

sensor:
  ### sensors for engine heater ###
  #
  # requires SMHI component for temperature forecast (or change to something else that suits you)
  #
  - platform: template
    sensors:
      heater_departuretime:
        friendly_name: 'Departure time'
        value_template: >-
          {% if states.input_number.heater_hour.state|round(0)|string|length == 1 %} {% set time = 0 %} {% endif %}
          {% set time = time|string + states.input_number.heater_hour.state|round(0)|string + ':' %}
          {% if states.input_number.heater_minute.state|round(0)|string|length == 1 %} {% set time = time|string + '0' %} {% endif %}
          {% set time = time|string + states.input_number.heater_minute.state|round(0)|string %}
          {{ time }}

      heater_temptime:
        friendly_name: 'Temperature adjusted time'
        value_template: >-
          {% set temp = states.sensor.heater_forecast.state|int %}
          {% if temp <= -15 %} {% set t = 1 %}
          {% elif temp > 5 %} {% set t = 20 %}
          {% else %} {% set t = (15 + temp) %} {% endif %}
          {{ (states.input_number.heater_maxmin.state|round(0)/(t**0.3))|int }}

      heater_forecast:
        friendly_name: 'Temperature forecast'
        value_template: >-
          {% if states.sensor.time.state > states.sensor.heater_departuretime.state and states.sensor.time.state > '00:00' %}
          {% set forecast = states.weather.smhi_home.attributes.forecast[1].templow %}
          {% else %}
          {% set forecast = states.weather.smhi_home.attributes.temperature %}
          {% endif %}
          {{ forecast }}

      heater_activationtime:
        friendly_name: 'Calculated activation time'
        value_template: >-
          {% set atime = (states.sensor.heater_temptime.state|round(0) * 60) %}
          {% if states.input_number.heater_hour.state|round(0)|string|length == 1 %} {% set time = 0 %} {% endif %}
          {% set time = time|string + states.input_number.heater_hour.state|round(0)|string + ':' %}
          {% if states.input_number.heater_minute.state|round(0)|string|length == 1 %} {% set time = time|string + '0' %} {% endif %}
          {% set time = time|string + states.input_number.heater_minute.state|round(0)|string %}
          {{ (as_timestamp(now().strftime("%Y-%m-%d") + ' ' + time) - atime) | timestamp_custom("%H:%M")|string }}

  - platform: time_date
    display_options:
      - 'time'

binary_sensor:
  - platform: workday
    name: eh_workday
    country: SE

  - platform: workday
    name: eh_workday_tomorrow
    days_offset: 1
    country: SE

input_number:
  ### input sliders for engine heater ###
  heater_hour:
    name: Hour
    icon: mdi:timer
    #  initial: 07
    min: 0
    max: 23
    step: 1

  heater_minute:
    name: Minute
    icon: mdi:timer
    #  initial: 00
    min: 0
    max: 55
    step: 5

  heater_delay:
    name: Time to overrun
    icon: mdi:timer
    #  initial: 30
    min: 0
    max: 59
    step: 1
    unit_of_measurement: min

  heater_maxmin:
    name: Maximum runtime
    icon: mdi:timer
    #  initial: 180
    min: 30
    max: 240
    step: 10
    unit_of_measurement: min
    
input_boolean:
  workdays_only:
    name: Only active on workdays
    #initial: true

  eh_skipnext:
    name: Skip next
    initial: false

group:
  engine_heater:
    name: Engine heater
    entities:
      - sensor.heater_departuretime
      - sensor.heater_activationtime
      - sensor.heater_temptime
      - sensor.heater_forecast
      - input_number.heater_hour
      - input_number.heater_minute
      - input_number.heater_delay
      - input_number.heater_maxmin
      - input_boolean.workdays_only
      - input_boolean.eh_skipnext
      - switch.ubisys_powerswitch_s1_r

automation:
  - alias: "Engine heater - activate"
    trigger: 
      platform: template
      #value_template: '{{ states.sensor.heater_activationtime.state == states.sensor.time.state }}'
      value_template: '{{ (states.sensor.time.state >= states.sensor.heater_activationtime.state) and (states.sensor.time.state <= states.sensor.heater_departuretime.state) and (states.switch.switch_engine_heater.state == "off") }}'
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: input_boolean.eh_skipnext
          state: 'off'
        - condition: state
          entity_id: person.linus
          state: home
        - condition: or
          conditions:
            - condition: state
              entity_id: input_boolean.workdays_only
              state: 'off'
            - condition: and
              conditions:
                - condition: state
                  entity_id: binary_sensor.eh_workday
                  state: 'on'
                - condition: state
                  entity_id: input_boolean.workdays_only
                  state: 'on'
    action:
      - service: homeassistant.turn_on
        entity_id: 
          - switch.ubisys_powerswitch_s1_r

  - alias: "Engine heater - deactivate"
    trigger:
      platform: template
      value_template: '{{ states.sensor.heater_departuretime.state == states.sensor.time.state }}'
    action:
      - delay:
          minutes: "{{ states('input_number.heater_delay') | int }}"
      - service: homeassistant.turn_off
        entity_id: 
          - switch.ubisys_powerswitch_s1_r
      - service: input_boolean.turn_off
        entity_id: input_boolean.eh_skipnext

  - alias: "Engine heater - precheck activate"
    trigger:
      platform: time
      at: '21:00:00'
    condition:
      condition: or
      conditions:
        - condition: and
          conditions:
            - condition: state
              entity_id: input_boolean.workdays_only
              state: 'off'
            - condition: state
              entity_id: automation.engine_heater_activate
              state: 'on'
        - condition: and
          conditions:
            - condition: state
              entity_id: binary_sensor.eh_workday_tomorrow
              state: 'on'
            - condition: state
              entity_id: input_boolean.workdays_only
              state: 'on'
            - condition: state
              entity_id: automation.engine_heater_activate
              state: 'on'
    action:
      - service: homeassistant.turn_on
        entity_id: switch.ubisys_powerswitch_s1_r
      - delay:
          seconds: 30
      - service: homeassistant.turn_off
        entity_id: switch.ubisys_powerswitch_s1_r

  - alias: "Engine heater - precheck measure"
    trigger: 
      platform: state
      entity_id: switch.ubisys_powerswitch_s1_r
      to: 'on'
      for:
        seconds: 28
    condition:
      - condition: template
        value_template: '{{ states.sensor.power_40.state|int < 100 }}'
    action:
      # - service: notify.google
      #   data_template:
      #     message: "You forgot to connect the engine heater cable"
      - service: notify.pushbullet
        data:
          title: "Engine heater"
          message: "You forgot to connect the cable ({{ states.sensor.power_40.state }}W)"

