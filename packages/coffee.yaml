# homeassistant:
#   customize:
#     sensor.coffee_state:
#       templates:
#         icon: mdi:coffee-maker
#         icon_color: >
#           if (state === 'off') return '';
#           if (state === 'heating') return 'rgb(59, 247, 81)';
#           if (state === 'making') return 'rgb(246, 255, 66)';
#           return 'rgb(235, 64, 52)';

sensor:
  - platform: template
    sensors:
      coffee_state:
        friendly_name: 'Coffee machine status'
        value_template: >-
          {% if states('sensor.sp120_coffee_power')|int < 1 %}
            off
          {% elif (states('sensor.sp120_coffee_power')|int > 70) and (states('sensor.sp120_coffee_power')|int < 120) %}
            heating
          {% elif (states('sensor.sp120_coffee_power')|int > 1200) and (states('sensor.sp120_coffee_power')|int < 1400) %}
            making
          {% else %}
            unknown ({{ states('sensor.sp120_coffee_power') }}W)
          {% endif %}
        icon_template: >-
          {% if states('sensor.sp120_coffee_power')|int < 1 %}
            mdi:coffee-off
          {% elif (states('sensor.sp120_coffee_power')|int > 70) and (states('sensor.sp120_coffee_power')|int < 120) %}
            mdi:coffee-to-go
          {% elif (states('sensor.sp120_coffee_power')|int > 1200) and (states('sensor.sp120_coffee_power')|int < 1500) %}
            mdi:coffee-maker
          {% else %}
            mdi:cloud-question
          {% endif %}
      
      coffee_filled:
        friendly_name: 'Machine preloaded'
        value_template: >-
          {% if states('binary_sensor.water_coffeemaker') == 'off' %}
            no
          {% else %}
            yes
          {% endif %}
        icon_template: >-
          {% if states('binary_sensor.water_coffeemaker') == 'off' %}
            mdi:gauge-empty
          {% else %}
            mdi:gauge-full
          {% endif %}

switch:
  - platform: mqtt
    name: 'Coffee maker switch'
    state_topic: 'coffeemaker/gpio/12'
    command_topic: 'coffeemaker/gpio/12'
    payload_on: '1'
    payload_off: '0'

input_datetime:
  coffee_start:
    name: 'Autostart at'
    has_time: true
    has_date: false

input_boolean:
  coffee_autostart:
    name: 'Autostart if preloaded'

automation:
  - alias: 'coffee: coffee ready'
    trigger:
      platform: state
      entity_id: sensor.coffee_state
      from: 'making'
      to: 'heating'
      for: '00:01:30' # takes some time before the coffee has passed thru the filter
    action:
      - service: notify.mobile_app_nokia_7_plus
        data:
          title: "Coffee maker"
          message: "Coffee is ready!"

  - alias: 'coffee: autostart'
    trigger:
      platform: template
      value_template: "{{ states('sensor.time') == states('input_datetime.coffee_start')[0:5] }}"
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: binary_sensor.water_coffeemaker
          state: 'on'
        - condition: state
          entity_id: input_boolean.coffee_autostart
          state: 'on'
    action:
      - service: switch.turn_on
        entity_id: switch.coffee_maker_switch
      - delay: '00:00:01'
      - service: switch.turn_off
        entity_id: switch.coffee_maker_switch
      - service: notify.mobile_app_nokia_7_plus
        data:
          title: "Coffee maker"
          message: "making coffee"

  - alias: 'coffee: auto turn off switch'
    trigger:
      platform: state
      entity_id: switch.coffee_maker_switch
      to: 'on'
      for:
        seconds: 2
    action:
      - service: switch.turn_off
        entity_id: switch.coffee_maker_switch
